// Pixels to Relative Values
// @access public
// @param {number|string} $pixels - Size in pixels
// @param {number|string} $context - Size in pixels
@function em($pixels, $context: $browser-context) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    @return ($pixels / $context) * 1em;
}

// Generate Color Variations
// @access public
// @param {string} $color - Source color
// @param {number|string} $saturation - Target color variation
@function gen-color($color, $saturation) {
    @if($saturation==50) {
        @return lighten(saturate($color, 10.4), 37.7);
    }
    @else if ($saturation==100) {
        @return lighten(desaturate($color, 10.4), 31.8);
    }
    @else if ($saturation==200) {
        @return lighten(desaturate($color, 17), 18.7);
    }
    @else if ($saturation==300) {
        @return lighten(desaturate($color, 20.9), 9.1);
    }
    @else if ($saturation==400) {
        @return lighten(desaturate($color, 6.6), 4.1);
    }
    @else if ($saturation==600) {
        @return darken(desaturate($color, 12.4), 3.1);
    }
    @else if ($saturation==700) {
        @return darken(desaturate($color, 24.5), 7.8);
    }
    @else if ($saturation==800) {
        @return darken(desaturate($color, 23.2), 11.7);
    }
    @else if ($saturation==900) {
        @return darken(desaturate($color, 16.1), 17);
    }
    @else if ($saturation=='A100') {
        @return lighten(saturate($color, 10.4), 16.7);
    }
    @else if ($saturation=='A200') {
        @return lighten(saturate($color, 10.4), 7.7);
    }
    @else if ($saturation=='A400') {
        @return darken(saturate($color, 10.4), 3.9);
    }
    @else if ($saturation=='A700') {
        @return darken(saturate($color, 10.4), 16.6);
    }
}

// Retrieve color from palette map
// @access public
// @param {Map} $palette - Source palette map
// @param {string} $saturation - Target color from palette
@function palette($color, $variant: 500) {
    $palette: $colors;
    @if map-exists($palette) and map-key-exists($palette, $color) and map-key-exists($color, $variant) {
        @return map-get(map-get($palette, $color), $variant);
    }
    @return #fff;
}

// Set text color based on background color
// @access public
// @param {String} $bgcolor - Background color
@function set-color($bgcolor) {
    @if (lightness($bgcolor) > 50) {
        @return #333; // Lighter backgorund, return dark color
    }
    @else {
        @return #fff; // Darker background, return light color
    }
}

// Test if `$value` is a valid direction
// @param {*} $value - Value to test
// @return {Bool}
@function is-direction($value) {
    $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value)=='number' and index('deg' 'grad' 'turn' 'rad', unit($value));
    @return $is-keyword or $is-angle;
}

// Convert a direction to legacy syntax
// @param {Keyword | Angle} $value - Value to convert
// @require {function} is-direction
// @require {function} convert-angle
// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
    @if is-direction($value)==false {
        @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
    }
    $conversion-map: ( to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right);
    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }
    @return 90deg - $value;
}

@function elevation($dp: 0) {
    $box-shadow: none;
    
    $blur: if($dp == 1, 3, $dp * 2);
    
    $ambientY: $dp;
    $ambientAlpha: ($dp + 10 + ($dp / 9.38)) / 100;
    
    $directY: if($dp < 10, floor($dp / 2) + 1, $dp - 4);
    $directAlpha: (24 - round($dp / 10)) / 100;
    

    @if $dp == 0 {
      @return $box-shadow;
    } @else {
      $box-shadow: #{'0 #{$ambientY}px #{$blur}px rgba(0, 0, 0, #{$ambientAlpha})'},
            #{'0 #{$directY}px #{$blur}px rgba(0, 0, 0, #{$directAlpha})'};
      @return $box-shadow;
    }
}